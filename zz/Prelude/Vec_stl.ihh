}
#include <vector>
#include <type_traits>
namespace ZZ {


template<class T> struct FixVectorType { typedef typename remove_const<T>::type type; };
template<> struct FixVectorType<bool> { typedef uchar type; };


template<class T>
struct Vec : vector<typename FixVectorType<T>::type>/*, NonCopyable*/ {
    using V = typename FixVectorType<T>::type;
    typedef T Elem;

private:
    T*       at(uind idx)       { return reinterpret_cast<T*>      (&vector<V>::operator[](0) + idx); }
    const T* at(uind idx) const { return reinterpret_cast<const T*>(&vector<V>::operator[](0) + idx); }

public:
    // These are private in the real Vec:
    Vec(const Vec<T>& other) : vector<V>(other) {}
    Vec<T>& operator=(const Vec<T>& other) { static_cast<vector<V>&>(*this) = static_cast<const vector<V>&>(other); return *this; }

  //________________________________________
  //  Constructors:

    Vec() : vector<V>() {}
    Vec(uind size) : vector<V>(size) {}
    Vec(uind size, const T& pad) : vector<V>(size, pad) {}
    Vec(Tag_copy, T* v, uind size) : vector<V>(v, v + size) {}
    template<class W>
    Vec(Tag_copy, const W& v) : vector<V>(v.begin(), v.end()) {}
    Vec(Tag_reserve, uind size) : vector<V>() { vector<V>::reserve(size); }
    Vec(const initializer_list<T>& elems) : vector<V>(elems) {}     // <<== doesn't work for 'bool'
    Vec(Vec<T>&& other) : vector<V>(other) {}

    Vec<T>& operator=(Vec<T>&& other) { other.moveTo(*this); return *this; }

  //________________________________________
  //  Allocation control:

    void     reserve(uind min_cap) { vector<V>::reserve(min_cap); }
    void     trim   ()             { vector<V>::shrink_to_fit(); }
    void     trimTo (uind max_cap) { vector<V>::shrink_to_fit(); }     // <<== cheating a bit here

  //________________________________________
  //  Underlying array:

    const T*       base    () const                     { return at(0); }
    T*             base    ()                           { return at(0); }
    Array<T>       release ()                           { assert(false); }      // -- can't do this with STL
    Array<const T> slice   (uind start = 0)       const { return ::ZZ::slice(*at(start), *at(size())); }
    Array<const T> slice   (uind start, uind end) const { return ::ZZ::slice(*at(start), *at(end)); }
    Array<T>       slice   (uind start = 0)             { return ::ZZ::slice(*at(start), *at(size())); }
    Array<T>       slice   (uind start, uind end)       { return ::ZZ::slice(*at(start), *at(end)); }
    uind           capacity() const                     { return vector<V>::capacity(); }

  //________________________________________
  //  Size operations:

    uind     size    () const    { return vector<V>::size(); }
    void     pop     ()          { vector<V>::pop_back(); }
    T        popC    ()          { T ret = vector<V>::back(); vector<V>::pop_back(); return ret; }
    void     shrinkTo(uind sz)                     { if (size() > sz) vector<V>::resize(sz); }
    void     growTo  (uind sz, const T& pad = T()) { if (size() < sz) vector<V>::resize(sz, pad); }
    void     setSize (uind sz, const T& pad = T()) { vector<V>::resize(sz, pad); }
    void     clear   (bool dealloc = false)        { if (dealloc){ Vec<T> empty; swap(empty, *this); }else vector<V>::clear(); }
    void     reset   (uind sz, const T& pad = T()) { clear(); growTo(sz, pad); }

  //________________________________________
  //  Stack interface:

    void     push  (const T& elem = T()) { vector<V>::push_back(elem); }
    void     push  (T&& elem)            { vector<V>::push_back(elem); }
    void     pushQ (const T& elem)       { vector<V>::push_back(elem); }   // -- STL has no version without checks
    const T& last  (uind i = 0) const { return *at(size()-i-1); }
    T&       last  (uind i = 0)       { return *at(size()-i-1); }
    const T& peek  (uind i = 0) const { return last(i); }   // -- alternative name
    T&       peek  (uind i = 0)       { return last(i); }
    const T& end_  (uind i = 0) const { return *at(size()-i); }
    T&       end_  (uind i = 0)       { return *at(size()-i); }

    const T* end   (uind i = 0) const { return at(size()); }
    T*       end   (uind i = 0)       { return at(size()); }
    const T* begin () const           { return at(0); }
    T*       begin ()                 { return at(0); }

  //________________________________________
  //  Indexing:

    const T& operator[](uind i) const { return *at(i); }
    T&       operator[](uind i)       { return *at(i); }
    const T& get       (uind i) const { return *at(i); }
    T&       get       (uind i)       { return *at(i); }

    T&       operator()(uind i, const T& pad = T()) { growTo(i+1, pad); return *at(i); }

    const T& operator[](ReverseIndex r) const { uind i = size() - r.off; return *at(i); }
    T&       operator[](ReverseIndex r)       { uind i = size() - r.off; return *at(i); }

  //________________________________________
  //  Copying/moving:

    void copyTo(Vec<T>& dst) const { static_cast<vector<V>&>(dst) = static_cast<const vector<V>&>(*this); }
    void moveTo(Vec<T>& dst)       { static_cast<vector<V>&>(dst) = move(static_cast<vector<V>&>(*this)); }

  //________________________________________
  //  Low-level:

    void revive(uind size) { assert(false); }      // -- can't do this with STL
};
